"""Created on Tue Mar  1 12:00:53 2022@author: bunge"""import osimport sysimport numpy as np#from scipy.optimize import curve_fit#from spec_pca_module import plot_sdss_linessys.path.insert(0, os.getcwd() + '/../' + 'DR16Q') # changes the directory to the DR16Q --> all paths after this will need to be written as if this was in the top level of the DR16Q#import utility_functions#from useful_wavelength_flux_error_modules import wavelength_flux_error_for_points, wavelength_flux_error_in_range, calculate_snr#from draw_figures import powerlaw, draw_dynamic, draw_dynamic_points, draw_original_figure, draw_normalized_figure#import normalization_module as norm#import draw_figures as norm#from utilities import read_file#from utility_functions import read_spectra, read_list_spectrafrom data_types import ColumnIndexesimport matplotlib.pyplot as plt#from spec_pca_module import plot_sdss_linesimport glob#ColumnIndexes = namedtuple(‘ColumnIndexes’, [‘wavelength’, ‘flux’, ‘error’])#from spec_pca_module import plot_sdss_linesconfig_path = os.getcwd() + '/DR16_EHVO_sorted_norm.csv' #"C:/Users/Dakota/Documents/GitHub/DR16Q/DR9_sorted_norm.csv"fontsize = 20figsize = (12,6)# Configure parametersplt.rcParams.update({'font.size': fontsize, 'figure.figsize': figsize})# Default tick label sizeplt.rcParams['xtick.labelsize'] = fontsizeplt.rcParams['ytick.labelsize'] = fontsizeplt.rcParams['xtick.direction'] = 'in'plt.rcParams['ytick.direction'] = 'in'plt.rcParams['xtick.major.size'] = 8plt.rcParams['ytick.major.size'] = 8plt.rcParams['xtick.major.width'] = 2plt.rcParams['ytick.major.width'] = 2plt.rcParams['xtick.top'] = Trueplt.rcParams['ytick.right'] = Trueplt.rcParams['axes.linewidth'] = 2def read_list_spectra(file_name: str, column_list: list):    """Reads in a csv file of spectra to allow you to access certain columns of data from the csv file.    Parameters    ----------    file_name: str        Enter in the name of your csv file as a string. Can also enter the path of where the file        is as long as the name of the file is included in the pathway.    column_list: list        Enter in the names of the columns you want to access from your csv file in the form as         a list of strings.    Returns    -------    spectra_list: list        Whatever information is in the spectra column as a list.    redshift_list: list        Whatever information is in the redshift column as a list.    snr_list: list        Whatever infromation is in the snr column as a list.    Example    -------    >>> CONFIG_FILE = sys.argv[1] if len(sys.argv) > 1 else os.getcwd() + "/OUTPUT_FILES/NORMALIZATION/good_normalization.csv"    >>> norm_spectra_list, redshift_list, calc_snr_list = read_list_spectra(CONFIG_FILE, ["NORM SPECTRA FILE NAME", "REDSHIFT", "CALCULATED SNR"])    [spec-9140-58039-0081norm.dr16  1.9  14.1    spec-7671-57360-0092norm.dr16   1.9  14.2]        Notes    -----    ``good_normalization.csv`` in this case is a csv file with several headers but we only wanted to select these three.    Contents of ``good_normalization.csv`` for purpose of example:    >>> SPECTRA FILE NAME,NORM SPECTRA FILE NAME,REDSHIFT,CALCULATED SNR,SDSS SNR,BF,CF    >>> spec-9140-58039-0081-dered.dr16,spec-9140-58039-0081norm.dr16,1.9,14.1,31.,9.1,0.1    >>> spec-7671-57360-0092-dered.dr16,spec-7671-57360-0092norm.dr16,1.9,14.2,20.,9.1,-2.01    ...        See Also    --------    Pandas is being utilized to read in the csv file, ``pd.read_csv()`` has many different keyword parameters that can be utilized.    Check pandas api for more details.    """        data = pd.read_csv(file_name)    spectra_list = data[column_list[0]]    redshift_list = data[column_list[1]]    snr_list = data[column_list[2]]    return(spectra_list,redshift_list, snr_list)def load_config(config_path, data_name):    """    Load redshifts and snr from DR config file.    Parameters    ----------    config_path : str        Location of config file.    data_names : arr        Array of specnames in the form 'plate-mjd-fiber'.    Returns    -------    parent_zs : arr        Redshifts in the order provided by data_names.    data_names : arr        SNRs in the order provided by data_names.    """    #load data from config        parent_zs_config, parent_snrs_config, parent_names_config_raw = read_file(config_path)    parent_names_config = []    for file in parent_names_config_raw:        specname = file[:19]        parent_names_config.append(specname)    parent_names_config = np.asarray(parent_names_config_raw)    parent_zs_config = np.asarray(parent_zs_config)    parent_snrs_config = np.asarray(parent_snrs_config)        #match redshifts and snrs to config file        parent_z = []    parent_snr = []    for i in range(len(parent_names_config)):        if parent_names_config[i] == data_name:            parent_z = parent_zs_config[i]            print(parent_z)            parent_snr = parent_snrs_config[i]            return(parent_z, parent_snr)def read_spectra(spectra_data):    """Reads in and returns a lists of lists containing the wavelength, flux, and error for each spectra.    Defines the variables to be used in the code.    Parameters    ----------    spectra_data:        The drX (X being 9 or 16) files in the form of a text file conataining the wavelength, flux        and error of that paticular spectra.    Returns    -------    wavelength: list        All of the wavelength values in a list.    flux: list        All of the flux values in a list.    error: list        All of the error values in a list.    Note    ----    As shown in the return, the return value are lists within a list.    """    column_index = ColumnIndexes(0, 1, 2)    wavelength = spectra_data[:, column_index.wavelength]    flux = spectra_data[:, column_index.flux]     error = spectra_data[:, column_index.error]         return [wavelength, flux, error]def plot_norm_spectra(directory, lines=False, error=False): # Normalized Spectra    """        Parameters    ----------    spectra : str        Directory in which the files are contained, or in which the        directories are contained.    lines : bool, optional        Whether or not you want to plot common emission        lines. The default is False.    Returns    -------    None.    """    # wave = []    # flux = []    # err = []    # name = []    #label = []    #colors = ['b', 'darkgreen', 'purple', 'cyan', 'magenta']    #file = ['directory']   # data_columns = np.loadtxt('/Users/rachelfulda/Desktop/Galaxies/DR16Q/DR16Q_EHVO/NORM_DR16Q_EHVO/spec-11634-58484-0334norm.dr16', dtype=str).T   # print(data_columns[1])         # z = np.loadtxt(directory, skiprows=1, delimiter = ',',dtype=str)[1].astype(np.float64)        #if directory.startswith('spec') and directory.endswith('norm.dr16' or 'norm.txt'):    #data_columns = np.loadtxt('/Users/rachelfulda/Desktop/Galaxies/DR16Q/DR16Q_EHVO/NORM_DR16Q_EHVO/spec-11634-58484-0334norm.dr16', dtype=float)    #path = '/Users/rachelfulda/Desktop/Galaxies/DR16Q/DR16Q_EHVO/NORM_DR16Q_EHVO/spec-4485-55836-0092norm.dr16'        norm_direc = '/Volumes/Extreme SSD/Galaxies/DR16Q/DR16Q_EHVO/NORM_DR16Q_EHVO/'    norm_spectrum_file_name = '/spec-4485-55836-0092norm.dr16'    norm_spectra_data = np.loadtxt(norm_direc + norm_spectrum_file_name)    wave, flux, err = read_spectra(norm_spectra_data)    #data = np.loadtxt(directory + '/' + file, dtype=np.float64).T    #wave = data_columns[0]    #flux = data_columns[1]    #err =  data_columns[2]         # name = file     # try:    #     bf, cf, norm_flux = file(wave, flux, err)    #     flux = norm_flux    # except ValueError:    #     pass    #label = 'SDSS-I'    # if file[-3:] == 'dr9':    #     label = 'SDSS-II'    # if file[-3:] == 'dr16':    #     label = 'SDSS-III/IV'             #ax1 = plt.subplots(1,1)    # ay1 = fig.add_subplot(1, 1, 1)    plt.title('SDSS Spectrum')    plt.plot(wave, flux,'k-')    plt.plot(wave, err, 'xkcd:shocking pink')     plt.xlabel(r"Observed Wavelength [$\rm \AA$]")    plt.ylabel(r"Normalized Flux")        plt.xlim(3500,6500)    plt.ylim(0,4)    #plt.plot([wavelength_observe1,wavelength_observe2],[1,1],'r--')    #color = ['xkcd:shocking pink', 'black', 'xkcd:purpleish blue']    #color = ['xkcd:shocking pink', 'xkcd:azure', 'blue', 'xkcd:purpleish blue', 'xkcd:slate']    #color = ['red', 'green', 'blue', 'orange', 'purple']        #     else:    #         label = '?'    #         mask = np.where((wave > wavemin) & (wave < wavemax))    #         plt.plot(wave[mask], flux[mask], label=label, alpha=0.75, color = colors[i])    #         plt.axhline(1, color = 'r')    # if lines:    #     plot_sdss_lines(wavemin, wavemax)    # if error:    #     plt.plot(wave, err, 'grey')    #ax1.title(name)    # ax1.set_xlabel("Restframe Wavelength (A)")    # ax1.set_ylabel("Normalized Flux Density")    # ax1.legend()    # plt.ylim((0,2))    #plt.subplots()    # plt.show()    #plt.clf()        plot_norm_spectra('/Volumes/Extreme SSD/Galaxies/DR16Q/DR16Q_EHVO/NORM_DR16Q_EHVO/spec-11634-58484-0334norm.dr16', lines=False) #, wavemin=1200, wavemax=1600path = "/Users/rachelfulda/Desktop/Galaxies/DR16Q/DR16Q_EHVO/NORM_DR16Q_EHVO/"all_files = glob.glob(path + "*.dr16")#print(path)       def plot_norm_loop(directory, lines=False, error=False): # Normalized Spectra        filename = []        for filename in all_files:        wave, flux, err = read_list_spectra(all_files, "spectra_list")                #norm_direc = '/Users/rachelfulda/Desktop/Galaxies/DR16Q/DR16Q_EHVO/NORM_DR16Q_EHVO'        #norm_spectrum_file_name = '/spec-4485-55836-0092norm.dr16'        #norm_spectra_data = np.loadtxt(norm_direc + norm_spectrum_file_name)        #wave, flux, err = read_spectra(norm_spectra_data)            plt.title('SDSS Spectrum')        plt.plot(wave, flux,'k-')        plt.plot(wave, err, 'xkcd:shocking pink')         plt.xlabel(r"Observed Wavelength [$\rm \AA$]")        plt.ylabel(r"Normalized Flux")        plt.xlim(3500,6500)        plt.ylim(0,4)        plt.show()                plot_norm_loop(all_files) #, wavemin=1200, wavemax=1600#### def plot_orig_spectra(directory, lines=False, error=False, wavemin=1200, wavemax=1500):#     """    #     Parameters#     ----------#     spectra : str#         Directory in which the files are contained, or in which the#         directories are contained.#     lines : bool, optional#         Whether or not you want to plot common emission#         lines. The default is False.#     Returns#     -------#     None.#     """   #     wave = []#     flux = []#     err = []#     name = []#     label = []#     colors = ['b', 'darkgreen', 'purple', 'cyan', 'magenta']#     for f in os.listdir(directory):#         if f.startswith('J'):#             z = np.loadtxt(directory + f + '/info.txt', skiprows=1,delimiter = ',',dtype=str)[1].astype(np.float64)#             for i, file in enumerate(os.listdir(directory + f)):#                 if file.startswith('spec') and file.endswith('norm.dr16' or 'norm.txt'):#                     data = np.loadtxt(file, dtype=np.float64).T#                     wave = data[0]#                     flux = data[1]#                     err = data[2]#                     name = file#                     try:#                         wave = wave / (1 + z)#                     except UnboundLocalError:#                         pass#                     if file[-3:] == 'txt':#                         try:#                             bf, cf, norm_flux = normalize_spec(wave, flux, err)#                             flux = norm_flux#                         except ValueError:#                             pass#                         label = 'SDSS-I'#                     if file[-3:] == 'dr9':#                         label = 'SDSS-II'#                     if file[-3:] == 'r16':#                         label = 'SDSS-III/IV'#                     # else:#                     #     label = '?'#                     mask = np.where((wave > wavemin) & (wave < wavemax))#                     plt.plot(wave[mask], flux[mask], label=label, alpha=0.75, color = colors[i])#                     plt.axhline(1, color = 'r')#             # if lines:#                 # plot_sdss_lines(wavemin, wavemax)#             if error:#                 plt.plot(wave, err, 'grey')#             plt.title(file)#             plt.xlabel("Restframe Wavelength (A)")#             plt.ylabel("Normalized Flux Density")#             plt.legend()#             # plt.ylim((0,2))#             plt.show()#             plt.clf()            # plot_spectra(os.getcwd() + '/VARIABILITY/DATA_VARIABILITY/', lines=False)###