"""Created on Tue Mar  1 12:00:53 2022@author: bunge"""import osimport sysimport csvimport pandas as pdimport numpy as npfrom collections import namedtuple#from scipy.optimize import curve_fit#from spec_pca_module import plot_sdss_linessys.path.insert(0, os.getcwd() + '/../' + 'DR16Q') # changes the directory to the DR16Q --> all paths after this will need to be written as if this was in the top level of the DR16Q#import utility_functions#from useful_wavelength_flux_error_modules import wavelength_flux_error_for_points, wavelength_flux_error_in_range, calculate_snr#from draw_figures import powerlaw, draw_dynamic, draw_dynamic_points, draw_original_figure, draw_normalized_figure#import normalization_module as norm#import draw_figures as norm#from utilities import read_file#from utility_functions import read_spectra, read_list_spectra#from data_types import ColumnIndexesimport matplotlib.pyplot as plt#from spec_pca_module import plot_sdss_lines#from spec_pca_module import plot_sdss_linesconfig_path = os.getcwd() + '/DR16Q_EHVO_FILES' #"C:/Users/Dakota/Documents/GitHub/DR16Q/DR9_sorted_norm.csv"fontsize = 20figsize = (12,6)# Configure parametersplt.rcParams.update({'font.size': fontsize, 'figure.figsize': figsize})# Default tick label sizeplt.rcParams['xtick.labelsize'] = fontsizeplt.rcParams['ytick.labelsize'] = fontsizeplt.rcParams['xtick.direction'] = 'in'plt.rcParams['ytick.direction'] = 'in'plt.rcParams['xtick.major.size'] = 8plt.rcParams['ytick.major.size'] = 8plt.rcParams['xtick.major.width'] = 2plt.rcParams['ytick.major.width'] = 2plt.rcParams['xtick.top'] = Trueplt.rcParams['ytick.right'] = Trueplt.rcParams['axes.linewidth'] = 2def read_list_spectra(file_name: str, column_list: list):    """Reads in a csv file of spectra to allow you to access certain columns of data from the csv file.    Parameters    ----------    file_name: str        Enter in the name of your csv file as a string. Can also enter the path of where the file        is as long as the name of the file is included in the pathway.    column_list: list        Enter in the names of the columns you want to access from your csv file in the form as         a list of strings.    Returns    -------    spectra_list: list        Whatever information is in the spectra column as a list.    redshift_list: list        Whatever information is in the redshift column as a list.    snr_list: list        Whatever infromation is in the snr column as a list.    Example    -------    >>> CONFIG_FILE = sys.argv[1] if len(sys.argv) > 1 else os.getcwd() + "/OUTPUT_FILES/NORMALIZATION/good_normalization.csv"    >>> norm_spectra_list, redshift_list, calc_snr_list = read_list_spectra(CONFIG_FILE, ["NORM SPECTRA FILE NAME", "REDSHIFT", "CALCULATED SNR"])    [spec-9140-58039-0081norm.dr16  1.9  14.1    spec-7671-57360-0092norm.dr16   1.9  14.2]        Notes    -----    ``good_normalization.csv`` in this case is a csv file with several headers but we only wanted to select these three.    Contents of ``good_normalization.csv`` for purpose of example:    >>> SPECTRA FILE NAME,NORM SPECTRA FILE NAME,REDSHIFT,CALCULATED SNR,SDSS SNR,BF,CF    >>> spec-9140-58039-0081-dered.dr16,spec-9140-58039-0081norm.dr16,1.9,14.1,31.,9.1,0.1    >>> spec-7671-57360-0092-dered.dr16,spec-7671-57360-0092norm.dr16,1.9,14.2,20.,9.1,-2.01    ...        See Also    --------    Pandas is being utilized to read in the csv file, ``pd.read_csv()`` has many different keyword parameters that can be utilized.    Check pandas api for more details.    """        data = pd.read_csv(file_name)    spectra_list = data[column_list[0]]    redshift_list = data[column_list[1]]    snr_list = data[column_list[2]]    return(spectra_list,redshift_list, snr_list)# def load_config(config_path, data_name):#     """#     Load redshifts and snr from DR config file.#     Parameters#     ----------#     config_path : str#         Location of config file.#     data_names : arr#         Array of specnames in the form 'plate-mjd-fiber'.#     Returns#     -------#     parent_zs : arr#         Redshifts in the order provided by data_names.#     data_names : arr#         SNRs in the order provided by data_names.#     """#     #load data from config    #     parent_zs_config, parent_snrs_config, parent_names_config_raw = read_file(config_path)#     parent_names_config = []#     for file in parent_names_config_raw:#         specname = file[:19]#         parent_names_config.append(specname)#     parent_names_config = np.asarray(parent_names_config_raw)#     parent_zs_config = np.asarray(parent_zs_config)#     parent_snrs_config = np.asarray(parent_snrs_config)    #     #match redshifts and snrs to config file    #     parent_z = []#     parent_snr = []#     for i in range(len(parent_names_config)):#         if parent_names_config[i] == data_name:#             parent_z = parent_zs_config[i]#             print(parent_z)#             parent_snr = parent_snrs_config[i]        #     return(parent_z, parent_snr)def read_spectrum(spectra_data):    """Reads in and returns a lists of lists containing the wavelength, flux, and error for each spectra.    Defines the variables to be used in the code.    Parameters    ----------    spectra_data:        The drX (X being 9 or 16) files in the form of a text file conataining the wavelength, flux        and error of that paticular spectra.    Returns    -------    wavelength: list        All of the wavelength values in a list.    flux: list        All of the flux values in a list.    error: list        All of the error values in a list.    Note    ----    As shown in the return, the return value are lists within a list.    """    ColumnIndexes = namedtuple('ColumnIndexes', ['wavelength', 'flux', 'error'])    column_index = ColumnIndexes(0, 1, 2)    wavelength = spectra_data[:, column_index.wavelength]    flux = spectra_data[:, column_index.flux]     error = spectra_data[:, column_index.error]         return [wavelength, flux, error]# def plot_norm_spectra(directory, lines=False, error=False): # Normalized Spectra  #     norm_direc = '/Volumes/Extreme SSD/Galaxies/DR16Q/DR16Q_EHVO/NORM_DR16Q_EHVO/'#     norm_spectrum_file_name = '/spec-4485-55836-0092norm.dr16'#     norm_spectra_data = np.loadtxt(norm_direc + norm_spectrum_file_name)#     wave, flux, err = read_spectra(norm_spectra_data)#     plt.title('SDSS Spectrum')#     plt.plot(wave, flux,'k-')#     plt.plot(wave, err, 'xkcd:shocking pink') #     plt.xlabel(r"Observed Wavelength [$\rm \AA$]")#     plt.ylabel(r"Normalized Flux")    #     plt.xlim(3500,6500)#     plt.ylim(0,4)#plot_norm_spectra('/Volumes/Extreme SSD/Galaxies/DR16Q/DR16Q_EHVO/NORM_DR16Q_EHVO/spec-11634-58484-0334norm.dr16', lines=False) #, wavemin=1200, wavemax=1600   # def collect_spectra_files(directory_folder): #, wavemin=4200, wavemax=6000#     for n_files in directory_folder:    #         all_files = os.listdir(directory_folder)#         print(all_files)#         return all_files# path = collect_spectra_files('/Users/rachelfulda/Desktop/Galaxies/DR16Q/VARIABILITY/DATA_VARIABILITY/J000022.93-022716.4')directory_folder_original = '/Users/rachelfulda/Desktop/Galaxies/DR16Q/VARIABILITY/DATA_VARIABILITY/J085117.41+301838.7'directory_folder_duplicates = '/Users/rachelfulda/Desktop/DATAREQUEST20220707/'direct_path1 = '/Users/rachelfulda/Desktop/Galaxies/DR16Q/VARIABILITY/DATA_VARIABILITY/J002238.35+273533.2/spec-7694-57359-0006norm.dr16'direct_path2 = '/Users/rachelfulda/Desktop/Galaxies/DR16Q/VARIABILITY/DATA_VARIABILITY/J002238.35+273533.2/spec-6280-56570-0623norm.dr16'original_spectra_name = 'MJD 57359'duplicate_spectra_name = 'MJD 56570'plot_name = 'J002238.35+273533.2'save_format = 'pdf' # 'pdf' to save as pdf file, 'png' to save as png file#-- TO CHANGE EVERY TIME:save_file_name = original_spectra_name + duplicate_spectra_name#norm_spectra = 'spec-5421-55980-0918norm.dr16'original_files = os.listdir(directory_folder_original)duplicate_files = os.listdir(directory_folder_duplicates)wavelength_emit1_initial = 1225.  # left xlim in restframewavelength_emit2_initial = 1600.  # right xlim in restframezem = 2.86 # redshift of norm_spectran = 3 # odd numbers onlywavelength_observe1 = (zem+1.)*wavelength_emit1_initial #Shift start wavelength into frame |<--This makes our wavelength range forwavelength_observe2 = (zem+1.)*wavelength_emit2_initial #Shift end wavelength into frame   |     the region we want to look attopylim = 2.5topemlabel = topylim - 0.03 # where you want to place the ion labelsif save_format == 'png':     pp2 = save_file_name + '.png'#-- save pdfif save_format == 'pdf':    pp2 = save_file_name + '.pdf'def smooth(norm_flux, box_pts):       box = np.ones(box_pts)/box_pts    y_smooth = np.convolve(norm_flux, box, mode='same')    return y_smoothfor data in original_files or duplicate_files:    # data1 = np.loadtxt(directory_folder_original + '/' + original_files[0], dtype=np.float64)    # data2 = np.loadtxt(directory_folder_duplicates + '/' + duplicate_files[12], dtype=np.float64)    data1 = np.loadtxt(direct_path1)    data2 = np.loadtxt(direct_path2)    wave, flux, err = read_spectrum(data1)    wave2, flux2, err2 = read_spectrum(data2)            fig, ay1 = plt.subplots(1)    plt.title(folder_name, size=28)        ay1.plot(wave, smooth(flux,n), 'steelblue',  alpha=0.75, label=original_spectra_name + ' (n=' + format(n) + ')')    ay1.plot(wave, err, 'lightblue')    ay1.plot(wave2, smooth(flux2,n), 'maroon', alpha=0.75, label=duplicate_spectra_name + ' (n=' + format(n) + ')')    ay1.plot(wave2, err2, 'pink')    ay1.set_xlim(wavelength_observe1, wavelength_observe2)            #(wavemin, wavemax)    ay1.set_ylim(0,topylim)    ay1.set_ylabel(r"Normalized Flux")   # Normalized    #ay1.set_ylabel(r"Flux [$10^{-17}$ erg/s/cm$^{2}/{\rm \AA}$]")   # Unnormalized    ay1.set_xlabel(r"Observed Wavelength [$\rm \AA$]")        plt.text(1549.0*(1+zem)-30,topemlabel ,'CIV',color='black',rotation = 90,fontname='serif', verticalalignment = 'top')    plt.text(1402.770*(1+zem)-40.,topemlabel,'SiIV+OIV]',color='black',rotation = 90,fontname='serif', verticalalignment = 'top')    alpha = 'Ly' + chr(945)    plt.text(1242.804*(1+zem)+30.,topemlabel, alpha + '+NV' ,color='black',rotation = 90,fontname='serif', verticalalignment = 'top')    plt.text(1304.8576*(1+zem)-35.,topemlabel,'OI',color='black',rotation=90,fontname='serif', verticalalignment = 'top')    plt.text(1334.5323*(1+zem)-30.,topemlabel,'CII',color='black',rotation=90,fontname='serif', verticalalignment = 'top')        coem=zem+1.    plt.xlim(wavelength_observe1,wavelength_observe2)         ay2 = ay1.twiny()    ay2.plot(wave/coem,1000*smooth(flux,n)+1000.)    ay2.set_xlabel(r"Restframe Wavelength [$\rm \AA$]")        ay1.xaxis.set_label_coords(0.48, -0.08)    ay2.xaxis.set_label_coords(0.48, 1.11)    ay2.xaxis.set_major_locator(plt.MaxNLocator(5))      plt.xlim(wavelength_observe1/coem, wavelength_observe2/coem)         # zem_label_x = 1450 # x-coordinate for zem label (in restframe)    # zem_label_y = 1.9 # y-coordinate for zem label    # zem_plot = "z = " + str(zem)    # smooth_plot = "smoothing = " + str(n)    # plt.text(zem_label_x, zem_label_y, smooth_plot, bbox=dict(facecolor='none', edgecolor='lightgrey', pad=4.0))    # plt.text(zem_label_x, zem_label_y, zem_plot, bbox=dict(facecolor='none', edgecolor='black', pad=7.0))    ay1.legend(loc='lower left', fontsize=18)       #plt.savefig(pp2)    #legend with mjd, smoothness (smooth=n)    """def collect_spectra(spectra, wavemin=4200, wavemax=6000):    fig, ay1 = plt.subplots()    ay1 = fig.add_subplot(1, 1, 1)    for path in os.listdir(spectra):        print(path)        if path.endswith('norm.dr16'):            print('hi')            ay1.print("ignore")        else:            data = np.loadtxt(spectra + path.name, dtype=np.float64)            wave, flux, err = read_spectrum(data)            ay1.plot(wave, flux, alpha=0.75)            ay1.set_prop_cycle(cycler(color=list('rgb')))            ay1.set_xlim(wavemin, wavemax)            ay1.set_ylim(0,45)            plt.title("SDSS Spectra")            ay1.set_xlabel(r"Observed Wavelength [$\rm \AA$]")            ay1.set_ylabel(r"Flux")                                 #add errors              collect_spectra('/Users/rachelfulda/Desktop/Galaxies/DR16Q/VARIABILITY/DATA_VARIABILITY/J000022.93-022716.4/')# def plot_orig_spectra(directory, lines=False, error=False, wavemin=1200, wavemax=1500):    #     Parameters#     ----------#     spectra : str#         Directory in which the files are contained, or in which the#         directories are contained.#     lines : bool, optional#         Whether or not you want to plot common emission#         lines. The default is False.#     Returns#     -------#     None.#     """   #     wave = []#     flux = []#     err = []#     name = []#     label = []#     colors = ['b', 'darkgreen', 'purple', 'cyan', 'magenta']#     for f in os.listdir(directory):#         if f.startswith('J'):#             z = np.loadtxt(directory + f + '/info.txt', skiprows=1,delimiter = ',',dtype=str)[1].astype(np.float64)#             for i, file in enumerate(os.listdir(directory + f)):#                 if file.startswith('spec') and file.endswith('norm.dr16' or 'norm.txt'):#                     data = np.loadtxt(file, dtype=np.float64).T#                     wave = data[0]#                     flux = data[1]#                     err = data[2]#                     name = file#                     try:#                         wave = wave / (1 + z)#                     except UnboundLocalError:#                         pass#                     if file[-3:] == 'txt':#                         try:#                             bf, cf, norm_flux = normalize_spec(wave, flux, err)#                             flux = norm_flux#                         except ValueError:#                             pass#                         label = 'SDSS-I'#                     if file[-3:] == 'dr9':#                         label = 'SDSS-II'#                     if file[-3:] == 'r16':#                         label = 'SDSS-III/IV'#                     # else:#                     #     label = '?'#                     mask = np.where((wave > wavemin) & (wave < wavemax))#                     plt.plot(wave[mask], flux[mask], label=label, alpha=0.75, color = colors[i])#                     plt.axhline(1, color = 'r')#             # if lines:#                 # plot_sdss_lines(wavemin, wavemax)#             if error:#                 plt.plot(wave, err, 'grey')#             plt.title(file)#             plt.xlabel("Restframe Wavelength (A)")#             plt.ylabel("Normalized Flux Density")#             plt.legend()#             # plt.ylim((0,2))#             plt.show()#             plt.clf()            # plot_spectra(os.getcwd() + '/VARIABILITY/DATA_VARIABILITY/', lines=False)###